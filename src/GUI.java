/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.io.*;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author colin
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        cleanup();
    }
    public void cleanup(){
        File file1 = new File("OCR.java");
        if (file1.exists()) file1.delete();
        file1 = new File("OCR.class");
        if (file1.exists()) file1.delete();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        //Webcam webcam = Webcam.getWebcamByName(Webcam.getWebcams().get(0).getName());
        Webcam webcam = Webcam.getDefault();
        webcam.setViewSize(WebcamResolution.VGA.getSize());
        WebcamPanel panel = new WebcamPanel(webcam);
        panel.setFPSDisplayed(true);
        panel.setDisplayDebugInfo(true);
        panel.setImageSizeDisplayed(true);
        panel.setMirrored(false);
        webcamPanel = new com.github.sarxos.webcam.WebcamPanel(webcam);
        captureButton = new javax.swing.JButton();
        Quit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputPanel = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        textPanel = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout webcamPanelLayout = new javax.swing.GroupLayout(webcamPanel);
        webcamPanel.setLayout(webcamPanelLayout);
        webcamPanelLayout.setHorizontalGroup(
                webcamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 230, Short.MAX_VALUE)
        );
        webcamPanelLayout.setVerticalGroup(
                webcamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        captureButton.setText("Capture");
        captureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureButtonActionPerformed(evt);
            }
        });

        Quit.setText("Quit");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });

        outputPanel.setColumns(20);
        outputPanel.setRows(5);
        jScrollPane2.setViewportView(outputPanel);

        textPanel.setColumns(20);
        textPanel.setRows(5);
        jScrollPane4.setViewportView(textPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(webcamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(14, 14, 14)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(captureButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Quit, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(webcamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(captureButton)
                                        .addComponent(Quit))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /**
     *
     * @param evt
     */
    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    /**
     *
     * @param evt
     */
    private void captureButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Webcam webcam = Webcam.getDefault();
        //Webcam webcam = Webcam.getWebcamByName(Webcam.getWebcams().get(1).getName());
        webcam.open();
        try {
            //Take the image capture, compile, update the text field
            ImageIO.write(webcam.getImage(), "JPG", new File("OCR.jpg") );
            cleanup();
            //String[] results = compile();
            //setOCRText(results[0]);
            //System.out.println(results[0]);
            //setOutputText(results[1]);
            //System.out.println(results[1]);
            try {
                runDemo();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            //Reset the camera for the next round
            //webcam = Webcam.getWebcamByName(Webcam.getWebcams().get(1).getName());
            webcam = Webcam.getDefault();
            //webcam.setViewSize(WebcamResolution.VGA.getSize());
            WebcamPanel panel = new WebcamPanel(webcam);
            panel.setFPSDisplayed(true);
            panel.setDisplayDebugInfo(true);
            panel.setImageSizeDisplayed(true);
            panel.setMirrored(false);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton Quit;
    private javax.swing.JButton captureButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea outputPanel;
    private javax.swing.JTextArea textPanel;
    private javax.swing.JPanel webcamPanel;

    public void setOutputText(String s) {
        this.outputPanel.setFont(outputPanel.getFont().deriveFont(16f));
        this.outputPanel.replaceRange(s,0,this.outputPanel.getText().length());
    }

    public void setOCRText(String test) {
        this.textPanel.setFont(textPanel.getFont().deriveFont(16f));
        this.textPanel.replaceRange(test,0,this.textPanel.getText().length());
    }

    public void compile(){
        System.out.println("BEGINNING COMPILING PROCESS");
        String outputData = "";
        StringBuilder ocrTextFile = new StringBuilder("");
        //Get the OS type
        String os = OSCheck.run();
        //Create the batch/shell files
        generateBatch(os);
        //Get the current paths of all the files we will need.
        String path = System.getProperty("user.dir");
        if (os.equals("windows")){
            ProcessBuilder processBuilder = new ProcessBuilder(path+"\\winOCR.bat");
            outputData+=runProcess(processBuilder);

            File createdText = new File("OCR.txt");
            setOCRText(getOCRText(ocrTextFile, createdText));
        }

    }
    public void run(){
        System.out.println("BEGINNING RUNNING PROCESS");
        String outputData = "";
        String os = OSCheck.run();
        String path = System.getProperty("user.dir");
        if(os.equals("windows")) {
            try {
                TimeUnit.SECONDS.sleep(1);
                ProcessBuilder temp = new ProcessBuilder(path+"\\winCompile.bat");
                outputData=runProcess(temp);
                setOutputText(outputData);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        } else if (os.equals("linux")){

        } else {}
    }

    private String getOCRText(StringBuilder ocrTextFile, File createdText) {
        try {
            Scanner reader = new Scanner(createdText);
            while(reader.hasNextLine()){
                String line = reader.nextLine();
                ocrTextFile.append(line+"\n");
            }
            return ocrTextFile.toString();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     *
     * @param processBuilder
     * @return
     */
    private static String runProcess(ProcessBuilder processBuilder) {
        try {
            //Begin the process
            Process process = processBuilder.start();
            StringBuilder output = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            //Print out the console lines to the IDE's console while waiting
            while ((line = reader.readLine()) != null) {
                output.append(line + "\n");
            }
            //Wait for the console to end, then end this program
            int exitVal = process.waitFor();
            if (exitVal == 0) {
                return output.toString();
                //System.exit(0);
            } else {
                //uh
            }

        } catch (IOException e){
            e.printStackTrace();
        } catch (InterruptedException e){
            e.printStackTrace();
        }
        return "";
    }
    /**
     * Private method which will identify the user's operating system and generate two shell/batch files appropriately.
     * The first is osOCR.bat/sh, which will run the OCR.py script.
     * The second is osCompile.bat/sh, which will attempt to compile and run the target text file.
     * @param osName - what OS we've identified.
     */
    private static void generateBatch(String osName){
        String path = System.getProperty("user.dir");
        FileWriter out;
        File osOCR = null;
        File osCompiler = null;

        if(osName.equalsIgnoreCase("linux")){
            osOCR = new File(path+"/linuxOCR.sh");
            osCompiler = new File(path+"/linuxCompile.sh");
            try {
                out = new FileWriter(osOCR);
                out.write("export GOOGLE_APPLICATION_CREDENTIALS=ocr-9301078d40b9.json first on command line \n");
                out.write( "python3 ocr.py OCR.jpg");
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                out = new FileWriter(osCompiler);
                out.write("cd " + path + "\n");
                out.write("rm OCR.java");
                out.write("mv OCR.txt OCR.java\n");
                out.write("javac -target 1.8 -source 1.8 OCR.java\n");
                out.write("java OCR");
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        else if (osName.equalsIgnoreCase("windows")){
            osOCR = new File(path+"/winOCR.bat");
            osCompiler = new File(path+"/winCompile.bat");
            try {
                out = new FileWriter(osOCR);
                out.write("set GOOGLE_APPLICATION_CREDENTIALS=ocr-9301078d40b9.json" + "\n");
                out.write( "python "+path+"\\ocr.py OCR.jpg");
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {

                out = new FileWriter(osCompiler);
//                out.write("cd " + path + "\n");
//                out.write("del OCR.java\n");
//                out.write("del OCR.class\n");
//                out.write("move OCR.txt OCR.java\n");
//                out.write("javac -target 1.8 -source 1.8 OCR.java\n");
//                out.write("java OCR");
                out.write("cd " + path + "\n");
                out.write("javac -target 1.8 -source 1.8 OCR.java\n");
                out.write("java OCR");
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    public void runDemo() throws InterruptedException {
        //String[] results = compile();
        //setOCRText(results[0]);
        //setOutputText(results[1]);
        cleanup();
        compile();
        TimeUnit.SECONDS.sleep(1);
        File textFile = new File("OCR.txt");
        File javaFile = new File("OCR.java");
        TimeUnit.SECONDS.sleep(1);
        textFile.renameTo(javaFile);
        run();
    }
}


class OSCheck {
    private static String OS = System.getProperty("os.name").toLowerCase();

    public static String run() {
        System.out.println("CURRENT OS: " + OS);
        if (isWindows()) {
            System.out.println("Windows!");
            return "windows";
        } else if (isMac()) {
            return "macOS";
        } else if (isUnix()) {
            return "linux";
        } else {
            System.out.println("Unsupported!");
            return "";
        }
    }

    public static boolean isWindows() {

        return (OS.indexOf("win") >= 0);

    }

    public static boolean isMac() {

        return (OS.indexOf("mac") >= 0);

    }

    public static boolean isUnix() {

        return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0);

    }
}

//    /**
//     * Returns a tuple of strings
//     * return[0] = ocr.txt read for output
//     * return[1] = output of the program after running
//     * @return
//     */
//    public String[] compile() {
//        System.out.println("BEGINNING COMPILING PROCESS");
//        String[] returnables = new String[2];
//        String outputData = "";
//        StringBuilder ocrTextFile = new StringBuilder("");
//        //Get the OS type
//        String os = OSCheck.run();
//        //Create the batch/shell files
//        generateBatch(os);
//        //Get the current paths of all the files we will need.
//        String path = System.getProperty("user.dir");
//
//        if (os.equals("linux")) {
//            Scanner in = new Scanner(System.in);
//            System.out.println("Please enter your linux password, if applicable.");
//            String password = in.nextLine();
//            //File file = new File("/home/insilvon/Desktop/collectedText.txt");
//            try {
//                System.out.println(path);
//                String command = "echo '"+password+"' | sudo -S chmod 777 "+path+"/linuxOCR.sh && echo '"+password+"' | sudo -S chmod 777 "+path+"/linuxCompile.sh";
//                System.out.println(command);
//                Process p = Runtime.getRuntime().exec(command);
//                p.destroy();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//            ProcessBuilder processBuilder = new ProcessBuilder(path+"/linuxOCR.sh");
//            outputData+=runProcess(processBuilder)+"\n\n\n";
//            //Do any editing on the text file here
//            File createdText = new File("OCR.txt");
//            returnables[0] = getOCRText(ocrTextFile, createdText);
//            processBuilder = new ProcessBuilder(path+"/linuxCompile.sh");
//            outputData+=runProcess(processBuilder);
//            System.out.println(outputData);
//            returnables[1] = outputData;
//            return returnables;
//        }
//        if (os.equals("windows")) {
//            //Run the python script and generate OCR.py
//            ProcessBuilder processBuilder = new ProcessBuilder(path+"\\winOCR.bat");
//            outputData+=runProcess(processBuilder);
//
//            File createdText = new File("OCR.txt");
//            returnables[0] = getOCRText(ocrTextFile, createdText);
//            //compile and run result
//            //cleanup();
//
//
//            //Do any editing on the text file here
////            processBuilder = new ProcessBuilder(path+"\\winCompile.bat");
////            runProcess(processBuilder);
//            //System.out.println(outputData);
//            returnables[1] = outputData;
//            return returnables;
//        }
//        return null;
//
//    }